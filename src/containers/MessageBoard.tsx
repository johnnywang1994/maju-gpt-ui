"use client";
import { FC, useRef, useEffect } from "react";
import { message } from "antd";
import BackTop from "antd/es/float-button/BackTop";
import useLiff from "@/hooks/useLiff";
import useCommon, { PageTab } from "@/hooks/useCommon";
import useMessages from "@/hooks/useMessages";
import { sendMessage } from "./MessageContainer/api";
import MessageContainer from "./MessageContainer";
import { RoleType, SendMessage } from "@/types/message";
import { MAX_MESSAGES, MODE } from "@/lib/env";

const isStatic = MODE === "static";

const MessageBoard: FC = () => {
  const ref = useRef(null);
  const { messages } = useMessages();
  const { settings, pageTab, computed, apiKey } = useCommon();
  const { accessToken } = useLiff();

  const handleMessages = (newMessage: SendMessage) => {
    const { enableSystemPrompt } = settings;
    let sendMessages = messages.map(({ role, content }) => ({
      role,
      content,
    })).filter(({ content }) => !content.startsWith('https://')); // remove image generated by GPT
    sendMessages.push(newMessage);
    // slice only last required messages to send
    sendMessages = sendMessages.slice(-MAX_MESSAGES);
    // system prompt will placed at the top of all messages
    if (enableSystemPrompt) {
      const systemMessage = {
        role: RoleType.SYSTEM,
        content: computed.systemPrompt,
      };
      // replace first message to keep message number still be within config
      if (sendMessages.length >= MAX_MESSAGES) {
        sendMessages[0] = systemMessage;
      } else {
        sendMessages.unshift(systemMessage);
      }
    }
    return sendMessages;
  };

  const handleError = (status: number) => {
    switch (status) {
      case 403:
        message.error(
          "You don't have permission, please ask to Administrator."
        );
        break;
    }
  };

  const handleSendRequest = async (newMessage: SendMessage) => {
    if (isStatic && !apiKey) {
      message.error(
        "Please enter your API key in settings before sending question."
      );
      return;
    }
    try {
      const options = pageTab === PageTab.Chat ? {
        messages: handleMessages(newMessage),
        provider: settings.provider,
        token: accessToken,
        temperature: settings.temperature,
        maxTokens: settings.maxTokens,
        model: settings.model,
        frequencyPenalty: settings.frequencyPenalty,
        presencePenalty: settings.presencePenalty,
      } : {
        token: accessToken,
        prompt: newMessage.content,
        model: settings.model,
        size: settings.size
      };
      // not valid image generate model
      if (
        pageTab === PageTab.Image &&
        !['dall-e-2', 'dall-e-3'].includes(options.model)
      ) {
        message.error('Please use model "dall-e-2", "dall-e-3" to generate image.');
        return;
      }
      const res = await sendMessage(
        pageTab,
        options,
        apiKey
      );
      res.tab = pageTab;
      if (res?.status) {
        handleError(res?.status);
      } else {
        return res;
      }
    } catch (err) {
      console.warn(err);
      message.error("Server error, please contact project owner.");
    }
  };

  useEffect(() => {
    (ref.current as unknown as HTMLElement)?.scrollTo({
      top: 99999,
      behavior: "smooth",
    });
  }, [messages]);

  return (
    <div ref={ref} className="h-full overflow-auto">
      <BackTop
        style={{ insetBlockEnd: 100 }}
        target={() => ref.current as any}
      />
      <MessageContainer
        names={{
          user: settings.username,
          assistant: settings.gptname,
        }}
        onSendRequest={handleSendRequest}
      />
      <p className="text-sky-700 mx-auto text-xs px-4 text-center">
        *only last {MAX_MESSAGES} messages in this context will be sent to
        GPT.(includes system prompt if enabled)
      </p>
    </div>
  );
};

export default MessageBoard;
